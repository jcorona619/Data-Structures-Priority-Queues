package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class UnorderedArrayPriorityQueue<E extends Comparable <E>> implements PriorityQueue<E> {
	private E [] storage;
	private int maxSize;
	private int currentSize;
	
	public UnorderedArrayPriorityQueue(int max) {
		maxSize = max;
		currentSize = 0;
		storage = (E[]) new Comparable[maxSize];
	}
	
	public UnorderedArrayPriorityQueue() {
		this(DEFAULT_MAX_CAPACITY);
	}	
	
	  //  Inserts a new object into the priority queue.  Returns true if
    //  the insertion is successful.  If the PQ is full, the insertion
    //  is aborted, and the method returns false.
    public boolean insert(E object) {
    	  if(isFull())
    		    return false;
    	  storage[currentSize++] = object;
    	  return true;
    }
   
    //  Removes the object of highest priority that has been in the
    //  PQ the longest, and returns it.  Returns null if the PQ is empty.
    
     public E remove() {
    	  if(isEmpty())
    		    return null;
    	  E min = storage[0];
    	  int index = 0;
    	  for(int i = 1;i < currentSize; i++) 
    		    if(min.compareTo(storage[i]) > 0) {
    			      min = storage[i];
    			      index = i;
    		        }
    	  for(int i = index; i<currentSize-1;i++)
    		    storage[i] = storage[i+1];
    	  currentSize--;
    	  return min;
    }
    
    //  Deletes all instances of the parameter obj from the PQ if found, and
    //  returns true.  Returns false if no match to the parameter obj is found.
    
    public boolean delete(E object) {
    	  if(!contains(object))
    		    return false;
    	  for(int i = 0;i<currentSize;i++)
    		    if(object.compareTo(storage[i]) == 0) {
    			      for(int j = i;j < currentSize-1;j++)
    				        storage[j] = storage[j+1];
    			      i--;
    			      currentSize--;
    		      }
    	  return true;
    }
   
    //  Returns the object of highest priority that has been in the
    //  PQ the longest, but does NOT remove it. 
    //  Returns null if the PQ is empty.
    
    public E peek() {
    	  if(isEmpty())
    		    return null;
    	  E min = storage[0];
    	  for(int i = 1;i < currentSize; i++) 
    		    if(min.compareTo(storage[i]) > 0)
    			      min = storage[i];
	      return min;
    }
    
    //  Returns true if the priority queue contains the specified element
    //  false otherwise.
    //  Unordered Array can only be done with O(n) time complexity.
    
     public boolean contains(E object) {
    	    for(int i =0; i<currentSize; i++)
    		      if(storage[i].compareTo(object) == 0)
    			        return true;
    	    return false;
    }
   
    //  Returns the number of objects currently in the PQ.
    
    public int size() { return currentSize; }
      
    //  Returns the PQ to an empty state.
    
    public void clear() { currentSize = 0;}
   
    //  Returns true if the PQ is empty, otherwise false
    
    public boolean isEmpty() { return currentSize == 0; }
   
    //  Returns true if the PQ is full, otherwise false.  List based
    //  implementations should always return false.
    
    public boolean isFull() { return currentSize == maxSize; }  
    
    //  Returns an iterator of the objects in the PQ, in no particular
    //  order.  
    
    public Iterator<E> iterator(){
    	return new IteratorHelper();
    }
    
  	//-----Nested Class---------------------------------
  	class IteratorHelper implements Iterator<E>{
  		  private int index;
  		
  		public boolean hasNext() {
  			  return index != currentSize;
  		}
  		
  		public E next() {
  			  if(!hasNext())
  				    throw new NoSuchElementException();
  			  return storage[index++];
  		}
  		
  		public void remove() {
  	    	throw new UnsupportedOperationException();
  	    	}
  	}//---End Nested Class------------------------------
}
