//Author: Joshua Corona

package data_structures;

import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class OrderedLinkedListPriorityQueue<E extends Comparable<E>> implements PriorityQueue<E> {
	private int currentSize;
	private int modCount;
	private Node<E> head;
	
	//Constructor
	public OrderedLinkedListPriorityQueue() {
		currentSize = 0;
		modCount = 0;
		head = null;
	}
	
	//Private Node Class///////
	private class Node<T>{
		T data;
		Node<T> next;
		
		public Node(T d) {
			data = d;
			next = null;
		}
	}/////////////////////
	
	//  Inserts a new object into the priority queue.  Returns true if
    	//  the insertion is successful.  If the PQ is full, the insertion
    	//  is aborted, and the method returns false.
	public boolean insert(E object) {
		Node<E> newNode = new Node<E>(object);
		Node<E> previous = null;
		Node<E> current = head;
		if(head == null) {
			head = newNode;
			currentSize++;
			modCount++;
			return true;
		}
		while( (current != null) && (object.compareTo(current.data) >= 0) ) {
			previous = current;
			current = current.next;
		}
		if(previous == null) {
			newNode.next = head;
			head = newNode;
		}
		else if(current == null) {
			previous.next = newNode;
		}
		else {
			previous.next = newNode;
			newNode.next = current;
		}
		currentSize++;
		modCount++;
    		return true;
    	}
   
	//  Removes the object of highest priority that has been in the
	//  PQ the longest, and returns it.  Returns null if the PQ is empty.
	public E remove() {
		if(isEmpty())
			return null;
		E temp = head.data;
		head = head.next;
		currentSize--;
		modCount++;
		return temp; 
	}

	//  Deletes all instances of the parameter obj from the PQ if found, and
	//  returns true.  Returns false if no match to the parameter obj is found.
    	public boolean delete(E object) {
    		if(!contains(object))
    			return false;
		int deleteCount = 0;
		Node<E> previous = null;
		Node<E> current = head;
		while(current != null && object.compareTo(current.data) != 0) {
			previous = current;
			current = current.next;
		}
		while(current != null && object.compareTo(current.data) == 0) {
			current = current.next;
			deleteCount++;
		}
		if(previous == null) 
			head = current;
		else if(current == null) 
			previous.next = current;
		else 
			previous.next = current;
    	currentSize -= deleteCount;
    	modCount += deleteCount;
    	return true;
    	}
   
    //  Returns the object of highest priority that has been in the
	//  PQ the longest, but does NOT remove it. 
	//  Returns null if the PQ is empty.
	public E peek() {
		if(isEmpty())
			return null;
		return head.data; 
	}

	//  Returns true if the priority queue contains the specified element
	//  false otherwise.
    	public boolean contains(E object) {
    		Node<E> temp = head; 
    		while(temp != null) {
    			if(object.compareTo(temp.data) == 0)
    				return true;
    			temp = temp.next;
    		}
    		return false;
    	}
   
    //  Returns the number of objects currently in the PQ.
	public int size() { return currentSize; }
  
	//  Returns the PQ to an empty state.
	public void clear() { 
		currentSize = 0;
		head = null;
		}

	//  Returns true if the PQ is empty, otherwise false
    	public boolean isEmpty() {return currentSize == 0;}
   
    	//  Returns true if the PQ is full, otherwise false.  List based
	//  implementations should always return false.
	public boolean isFull() { return false; }

	//  Returns an iterator of the objects in the PQ, in no particular
	//  order.  
	public Iterator<E> iterator(){
		return new IteratorHelper();
	}	
   
  	//-----Nested Class---------------------------------
  	class IteratorHelper implements Iterator<E>{
  		Node<E> iterPtr;
  		long modCheck;
  		public IteratorHelper() {
  			iterPtr = head;
  			modCheck = modCount;
  		}
  		
  		public boolean hasNext() {
  			if(modCheck != modCount)
  				throw new ConcurrentModificationException();
  			return (iterPtr != null);
  		}
  		
  		public E next() {
  			if(!hasNext())
  				throw new NoSuchElementException();
  			E temp = iterPtr.data;
  			iterPtr = iterPtr.next;
  			return temp;
  		}
  		
  		public void remove() {
  	    	throw new UnsupportedOperationException();
  	    	}
  	}//---End Nested Class------------------------------

}
